import numpy as np

def get_perpendicular_positions(atomic_position, distance_x):
    """
    Calculates two atomic positions perpendicular to the original position vector.

    The new positions are generated by creating a displacement vector that is
    perpendicular to the original atomic position vector (from the origin)
    and has a length equal to the specified distance_x.

    Args:
        atomic_position (np.ndarray or list): A 3D vector representing the
                                              initial atomic position in angstroms.
        distance_x (float): The desired distance for the perpendicular
                            displacement in angstroms.

    Returns:
        tuple[np.ndarray, np.ndarray]: A tuple containing the two new atomic
                                       positions as NumPy arrays.
    """
    # Ensure the input is a NumPy array for vector operations
    initial_pos_vector = np.array(atomic_position)

    # To find a vector perpendicular to the initial position vector, we take
    # the cross product with a non-collinear vector. We choose a different
    # vector for the cross product if the initial position is aligned with
    # the z-axis to avoid getting a zero vector.
    if np.allclose(initial_pos_vector[:2], [0, 0]):
        # The vector is on or very close to the z-axis, use the x-axis for the cross product
        non_collinear_vector = np.array([1.0, 0.0, 0.0])
    else:
        # Otherwise, the z-axis is a safe choice
        non_collinear_vector = np.array([0.0, 0.0, 1.0])

    # Calculate the perpendicular vector using the cross product
    perpendicular_vector = np.cross(initial_pos_vector, non_collinear_vector)

    # Normalize the perpendicular vector to get a unit vector
    normalized_perpendicular_vector = perpendicular_vector / np.linalg.norm(perpendicular_vector)

    # Scale the unit vector by the desired distance to get the displacement
    displacement_vector = normalized_perpendicular_vector * distance_x

    # Calculate the two new positions by adding and subtracting the displacement
    position_1 = initial_pos_vector + displacement_vector
    position_2 = initial_pos_vector - displacement_vector

    return position_1, position_2

# --- Example Usage ---
# Define the initial atomic position in Angstroms
initial_atom_pos = [27.82531, 29.17873, 31.87567 ]

# Set the desired perpendicular distance 'x' in Angstroms
perpendicular_distance = 0.5

# Get the two new positions
pos1, pos2 = get_perpendicular_positions(initial_atom_pos, perpendicular_distance)

# Print the results
print(f"Original Position: {np.array(initial_atom_pos)}")
print(f"Distance (x): {perpendicular_distance} Å")
print("-" * 30)
print(f"Position 1: {pos1}")
print(f"Position 2: {pos2}")

# --- Verification (Optional) ---
# The vector from the original position to the new one should be perpendicular
# to the original position vector. Their dot product should be zero.
displacement = pos1 - initial_atom_pos
dot_product = np.dot(displacement, initial_atom_pos)
distance_from_original = np.linalg.norm(displacement)

print("-" * 30)
print(f"Verification:")
print(f"Dot product of displacement and original vector: {dot_product:.10f} (should be ~0)")
print(f"Calculated distance from original position: {distance_from_original:.10f} Å (should be {perpendicular_distance})")